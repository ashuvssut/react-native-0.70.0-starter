// prettier-ignore
{
  "extends": "@tsconfig/react-native/tsconfig.json" /* Recommended React Native TSConfig base */,
  "compilerOptions": {
		/* Visit https://aka.ms/tsconfig.json to read more about this file */
		"rootDir": ".",
		"resolveJsonModule": true /* Enable importing .json files */,
		"sourceMap": true,
		"declaration": false,
		"importHelpers": true,
		"module": "esnext",
		"skipDefaultLibCheck": true,
		"allowJs": false,
		"lib": [
			"dom",
			"esnext",
			"esnext.asynciterable"
		] /* Specify a set of bundled library declaration files that describe the target runtime environment. */,
		"jsx": "react-native" /* Specify what JSX code is generated. */,
		"target": "es2018",
		"forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
		"newLine": "lf" /* Set the newline character for emitting files. */,

		/* Type Checking */
		"strict": true /* Enable all strict type-checking options. */,
		"noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied `any` type.. */,
		"strictNullChecks": true /* When type checking, take into account `null` and `undefined`. */,
		"strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
		"strictBindCallApply": true /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */,
		"strictPropertyInitialization": false /* Check for class properties that are declared but not set in the constructor. */,
		"noImplicitThis": true /* Enable error reporting when `this` is given the type `any`. */,
		"useUnknownInCatchVariables": true /* Type catch clause variables as 'unknown' instead of 'any'. */,
		"alwaysStrict": true /* Ensure 'use strict' is always emitted. */,
		// "noUnusedLocals": true /* Enable error reporting when a local variables aren't read. */,
		"noUnusedParameters": true /* Raise an error when a function parameter isn't read */,
		"exactOptionalPropertyTypes": true /* Interpret optional property types as written, rather than adding 'undefined'. */,
		"noImplicitReturns": true /* Enable error reporting for codepaths that do not explicitly return in a function. */,
		"noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements. */,
		"noUncheckedIndexedAccess": true /* Include 'undefined' in index signature results */,
		"noImplicitOverride": true /* Ensure overriding members in derived classes are marked with an override modifier. */,
		"noPropertyAccessFromIndexSignature": true /* Enforces using indexed accessors for keys declared using an indexed type */,
		"allowUnusedLabels": true /* Disable error reporting for unused labels. */,
		"allowUnreachableCode": true /* Disable error reporting for unreachable code. */,

		/* Completeness */
		"skipLibCheck": true /* Skip type checking all .d.ts files. */,

    "baseUrl": "./src",
		"paths": {
			"$hooks/*": ["theme/*", "hooks/*"],
			"$types/*": ["types/*"],
			"$types/redux": ["redux/types"],
			"$svg": ["assets/svg/index"],
			"$utils/*": ["utils/*"]
		}
	}
}
